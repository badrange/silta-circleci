phpcs:
  steps:
    - run:
        name: phpcs validation
        command: |
          if [ -f phpcs.xml ] && [ -f vendor/bin/phpcs ]; then
            vendor/bin/phpcs --standard=phpcs.xml -s --colors
          fi

grumphp:
  steps:
    - run:
        name: grumphp validation
        command: |
          if [ -f grumphp.yml ] && [ -f vendor/bin/grumphp ]; then
            vendor/bin/grumphp run
          fi

drupal-composer-install:
  parameters:
    install-dev-dependencies:
      type: boolean
      default: false
  steps:
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
          - v1-dependencies-{{ checksum "composer.lock" }}

    - when:
        condition: <<parameters.install-dev-dependencies>>
        steps:
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --optimize-autoloader

    - unless:
        condition: <<parameters.install-dev-dependencies>>
        steps:
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --no-dev --optimize-autoloader

    - save_cache:
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/themes/contrib
          - ./web/profiles/contrib
          - ./web/libraries
        key: v1-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>

drupal-docker-build:
  steps:
    - build-docker-image:
        dockerfile: silta/nginx.Dockerfile
        path: web
        identifier: nginx

    - build-docker-image:
        dockerfile: silta/php.Dockerfile
        path: "."
        identifier: php
        docker-hash-prefix: v2

    - build-docker-image:
        dockerfile: silta/shell.Dockerfile
        path: "."
        identifier: shell

drupal-helm-deploy:
  parameters:
    chart_name:
      type: string
    chart_repository:
      type: string
    chart_version:
      type: string
      default: ""
    silta_config:
      type: string
    cluster_domain:
      type: env_var_name
      default: CLUSTER_DOMAIN
  steps:
    - helm-cleanup
    - run:
        name: Deploy helm release
        no_output_timeout: "15m"
        command: |
          # Disable reference data if the required volume is not present.
          reference_volume=$(kubectl get pv | grep --extended-regexp "$NAMESPACE/.*-reference-data") || true
          reference_data_override=''
          if [[ -z "$reference_volume" ]] ; then
            reference_data_override='--set referenceData.skipMount=true'
          fi

          # echo $WHITELISTED_IPS

          # Override Database credentials if specified
          if [[ ! -z "$DB_ROOT_PASS" ]] ; then
            db_root_pass_override="--set mariadb.rootUser.password=$DB_ROOT_PASS"
          fi
          if [[ ! -z "$DB_USER_PASS" ]] ; then
            db_user_pass_override="--set mariadb.db.password=$DB_USER_PASS"
          fi

          # Add internal VPN if defined in environment
          extra_noauthips=""
          if [[ ! -z "$VPN_IP" ]] ; then
            extra_noauthips="--set nginx.noauthips.vpn=${VPN_IP}/32"
          fi

          if [[ ! -z "<<parameters.chart_version>>" ]] ; then
            version="--version <<parameters.chart_version>>"
          fi

          output=$((helm upgrade --install "$RELEASE_NAME" '<<parameters.chart_name>>' \
            --repo '<<parameters.chart_repository>>' \
            $version \
            --cleanup-on-fail \
            --set environmentName="$SILTA_ENVIRONMENT_NAME" \
            --set branchName="$CIRCLE_BRANCH" \
            --set php.image="$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$NAMESPACE-php:$php_HASH" \
            --set nginx.image="$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$NAMESPACE-nginx:$nginx_HASH" \
            --set shell.image="$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$NAMESPACE-shell:$shell_HASH" \
            $extra_noauthips \
            $db_root_pass_override \
            $db_user_pass_override \
            --set shell.gitAuth.repositoryUrl="$CIRCLE_REPOSITORY_URL" \
            --set shell.gitAuth.apiToken="$GITAUTH_API_TOKEN" \
            --set clusterDomain="${<<parameters.cluster_domain>>}" \
            $reference_data_override \
            --namespace="$NAMESPACE" \
            --values '<<parameters.silta_config>>' \
            --timeout 15m) 2>&1) || EXIT_CODE=$?

          if [[ $output == *"BackoffLimitExceeded"* ]]; then
            # Don't show BackoffLimitExceeded, it confuses everyone.
            echo "The post-release job failed, see log output in the next step below."
          else
            echo "$output"
          fi

          exit $EXIT_CODE

    - run:
        name: Deployment log
        when: always
        command: |
          kubectl logs "job/$RELEASE_NAME-post-release" -n "$NAMESPACE" -f --timestamps=true

    - run:
        name: Wait for resources to be ready
        command: |
          # Get all deployments and statefulsets in the release and check the status of each one.
          statefulsets=$(kubectl get statefulset -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name)
          if [ ! -z "$statefulsets" ]; then
            echo "$statefulsets" | xargs -n 1 kubectl rollout status -n "$NAMESPACE"
          fi
          kubectl get deployment -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name | xargs -n 1 kubectl rollout status -n "$NAMESPACE"

    - helm-release-information
